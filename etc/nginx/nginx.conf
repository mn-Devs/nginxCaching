# added because nginx couldn't load module
load_module /usr/lib/nginx/modules/ngx_stream_module.so;
user root;
worker_processes auto;
worker_rlimit_nofile 65535;

error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;


events {
        worker_connections 32000;
}

stream {
        # Set resolvers against DNS servers not used for local interception. You may wish to change these to your ISP's DNS servers.
        resolver 8.8.8.8 8.8.4.4 ipv6=off;

        # Log format for stream
        log_format  stream      'HTTPS [$time_local] $remote_addr $protocol $ssl_preread_server_name:$server_port $status';
        access_log  /var/log/nginx/access.log stream;

        server {
                # Pass through SSL connections upstream using SNI preread
                listen 443;
                proxy_buffer_size 16k;
                ssl_preread on;
                proxy_pass "${ssl_preread_server_name}:443";

                # Restrict each client to a set bandwidth - Eg. 1m = 10mbps
                # proxy_download_rate 1m;
                # proxy_upload_rate 1m;
        }
}

http {
        include /etc/nginx/mime.types;
        default_type application/octet-stream;

        # Logging format
        log_format  main        'HTTP [$time_local] $remote_addr $request_method $host$request_uri $status '
                                '"$http_user_agent" "$upstream_cache_status"';
                               

        access_log /var/log/nginx/access.log main;

        # Set resolvers against DNS servers not used for local interception. You may wish to change these to your ISP's DNS servers.
        resolver 8.8.8.8 8.8.4.4 ipv6=off;

        # Global cache paths and variables
        proxy_cache_path /var/cache/nginx/cache levels=1:2 keys_zone=cache:10m max_size=80g inactive=14d use_temp_path=off;

        # Miscellaneous tweaks
        sendfile on;
        tcp_nopush on;
        keepalive_timeout 60;
        keepalive_requests 512;
        client_max_body_size 20G;
        client_body_buffer_size 16M;
        server_names_hash_max_size 1024;

        # User agent mappings to no cache rules
        map $http_user_agent $no_cache {
                # Don't cache downloads by Apple caching servers
                ~(swupd_syncd) 1;
                # Set default to cache
                default 0;
        }

        server {
                # Don't cache these zones
                listen 80 default_server;

                                # Don't cache Google redirectors
                server_name     redirector.gvt1.com
                                # Don't cache WSUS downloads. What's the point?
                                wsus.ds.download.windowsupdate.com;

                location / {
                        proxy_http_version 1.1;
                        proxy_pass http://${host};
                        proxy_pass_request_headers on;
                        proxy_set_header Host $host;
                }
        }

        server {
                # Redirect officecdn.microsoft.com to officecdn.microsoft.com.edgesuite.net
                listen 80;
                server_name     officecdn.microsoft.com;
                return 301 http://officecdn.microsoft.com.edgesuite.net$request_uri;
        }


        server {
                # Aggressive caching for clustered nodes (eg. same files exist on 1/2/3/4/5/6/7.tlu.dl.delivery.mp.microsoft.com)
                listen 80;

                server_name     tlu.dl.delivery.mp.microsoft.com *.tlu.dl.delivery.mp.microsoft.com
                                download.windowsupdate.com *.download.windowsupdate.com
                                *.gvt1.com;

                ignore_invalid_headers off;

                proxy_cache cache;
                proxy_cache_valid 200 206 30d;

                # Check if caching should be ignored against user-agent cache map
                proxy_no_cache $no_cache;

                #Only cache GET request methods
                proxy_cache_methods GET;

                # Slice downloads into 16MB pieces
                slice 16M;

                # Lock cache objects until the 16MB piece is retrieved
                proxy_cache_lock on;

                # Wait 600 seconds for 16MB piece to arrive
                proxy_cache_lock_timeout 600s;
                proxy_cache_lock_age 600s;

                # Aggressive caching
                proxy_cache_key "$request_method|$uri|$slice_range";

                proxy_cache_use_stale updating;

                location / {
                        proxy_http_version 1.1;
                        proxy_pass http://${host};
                        proxy_pass_request_headers on;
                        proxy_set_header Host $host;
                        proxy_set_header Range $slice_range;
                        proxy_set_header Upgrade-Insecure-Requests "";
                        proxy_ignore_headers X-Accel-Expires Expires Cache-Control Set-Cookie Vary;
                        proxy_hide_header ETag;
                }
        }

        server {
                # Default caching
                listen 80;

                server_name     officecdn.microsoft.com.edgesuite.net
                                dl.google.com
                                ardownload.adobe.com ccmdl.adobe.com agsupdate.adobe.com;

                ignore_invalid_headers off;

                proxy_cache cache;
                proxy_cache_valid 200 206 30d;

                # Check if caching should be ignored against user-agent cache map
                proxy_no_cache $no_cache;

                # Only cache GET request methods
                proxy_cache_methods GET;

                # Slice downloads into 16MB pieces
                slice 16M;

                # Lock cache objects until the 16MB piece is retrieved
                proxy_cache_lock on;

                # Wait 600 seconds for 16MB piece to arrive
                proxy_cache_lock_timeout 600s;
                proxy_cache_lock_age 600s;

                # Standard caching  
                proxy_cache_key "$request_method|$host$uri|$slice_range";

                proxy_cache_use_stale updating;

                location / { 
                        proxy_http_version 1.1;
                        proxy_pass http://${host};
                        proxy_pass_request_headers on;
                        proxy_set_header Host $host;
                        proxy_set_header Range $slice_range;
                        proxy_set_header Upgrade-Insecure-Requests "";
                        proxy_ignore_headers X-Accel-Expires Expires Cache-Control Set-Cookie Vary;
                        proxy_hide_header ETag;
                }
        }
}